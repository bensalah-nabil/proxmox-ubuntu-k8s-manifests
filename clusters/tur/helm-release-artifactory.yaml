---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: helm-release-helm-artifactory
  namespace: flux-system
spec:
  chart:
    spec:
      chart: artifactory
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: artifactory
  interval: 11s
  targetNamespace: artifactory
  values:
    access:
      accessConfig:
        security:
          tls: false
      database:
        maxOpenConnections: 80
      enabled: true
      extraEnvironmentVariables: null
      javaOpts: null
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:8040/access/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}30{{ else }}0{{ end }}
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: access
      readinessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:8040/access/api/v1/system/readiness
          initialDelaySeconds: 5
          failureThreshold: 30
          periodSeconds: 15
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: false
      resources: {}
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:8040/access/api/v1/system/readiness
          initialDelaySeconds: 5
          failureThreshold: 30
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
      tomcat:
        connector:
          extraConfig: acceptCount="100"
          maxThreads: 50
          sendReasonPhrase: false
    additionalResources: ""
    artifactory:
      admin:
        dataKey: null
        ip: 127.0.0.1
        password: null
        secret: null
        username: admin
      affinity: {}
      annotations: {}
      catalinaLoggers: []
      catalinaLoggersResources: {}
      circleOfTrustCertificatesSecret: null
      coldStorage:
        enabled: false
      configMapName: null
      configMaps: |
        # posthook-start.sh: |-
        #   echo "This is a post start script"
        # posthook-end.sh: |-
        #   echo "This is a post end script"
      consoleLog: false
      copyOnEveryStartup: null
      customCertificates:
        enabled: false
      customInitContainers: |
        # - name: "custom-systemyaml-setup"
        #   image: {{ include "artifactory.getImageInfoByValue" (list . "initContainers") }}
        #   imagePullPolicy: {{ .Values.initContainers.image.pullPolicy }}
        #   securityContext:
        #     runAsNonRoot: true
        #     allowPrivilegeEscalation: false
        #     capabilities:
        #       drop:
        #         - NET_RAW
        #   command:
        #     - 'sh'
        #     - '-c'
        #     - 'curl -o {{ .Values.artifactory.persistence.mountPath }}/etc/system.yaml https://<repo-url>/systemyaml'
        #   volumeMounts:
        #     - mountPath: "{{ .Values.artifactory.persistence.mountPath }}"
        #       name: artifactory-volume
      customInitContainersBegin: |
        # - name: "custom-setup"
        #   image: {{ include "artifactory.getImageInfoByValue" (list . "initContainers") }}
        #   imagePullPolicy: {{ .Values.initContainers.image.pullPolicy }}
        #   securityContext:
        #     runAsNonRoot: true
        #     allowPrivilegeEscalation: false
        #     capabilities:
        #       drop:
        #         - NET_RAW
        #   command:
        #     - 'sh'
        #     - '-c'
        #     - 'touch {{ .Values.artifactory.persistence.mountPath }}/example-custom-setup'
        #   volumeMounts:
        #     - mountPath: "{{ .Values.artifactory.persistence.mountPath }}"
        #       name: artifactory-volume
      customPersistentVolumeClaim: {}
      customSecrets: null
      customSidecarContainers: |
        # - name: "sidecar-list-etc"
        #   image: {{ include "artifactory.getImageInfoByValue" (list . "initContainers") }}
        #   imagePullPolicy: {{ .Values.initContainers.image.pullPolicy }}
        #   securityContext:
        #     runAsNonRoot: true
        #     allowPrivilegeEscalation: false
        #     capabilities:
        #       drop:
        #         - NET_RAW
        #   command:
        #     - 'sh'
        #     - '-c'
        #     - 'sh /scripts/script.sh'
        #   volumeMounts:
        #     - mountPath: "{{ .Values.artifactory.persistence.mountPath }}"
        #       name: artifactory-volume
        #     - mountPath: "/scripts/script.sh"
        #       name: custom-script
        #       subPath: script.sh
        #   resources:
        #     requests:
        #       memory: "32Mi"
        #       cpu: "50m"
        #     limits:
        #       memory: "128Mi"
        #       cpu: "100m"
      customVolumeMounts: |
        # - name: custom-script
        #   mountPath: "/scripts/script.sh"
        #   subPath: script.sh
        # - name: posthook-start
        #   mountPath: "/scripts/posthoook-start.sh"
        #   subPath: posthoook-start.sh
        # - name: prehook-start
        #   mountPath: "/scripts/prehook-start.sh"
        #   subPath: prehook-start.sh
      customVolumes: |
        # - name: custom-script
        #   configMap:
        #     name: custom-script
      database:
        maxOpenConnections: 80
      deleteDBPropertiesOnStartup: true
      externalArtifactoryPort: 8081
      externalPort: 8082
      extraEnvironmentVariables: null
      extraSystemYaml: {}
      haBackupDir:
        enabled: false
        path: null
      haDataDir:
        enabled: false
        path: null
      image:
        pullPolicy: IfNotPresent
        registry: releases-docker.jfrog.io
        repository: jfrog/artifactory-pro
      internalArtifactoryPort: 8081
      internalPort: 8082
      javaOpts:
        jmx:
          accessFile: null
          authenticate: false
          enabled: false
          host: null
          passwordFile: null
          port: 9010
          ssl: false
      labels: {}
      license:
        dataKey: null
        licenseKey: null
        secret: null
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.artifactory.tomcat.maintenanceConnector.port }}/artifactory/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          periodSeconds: 10
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      loggers: []
      loggersResources: {}
      metrics:
        enabled: false
        filebeat:
          elasticsearch:
            password: ""
            url: Elasticsearch url where JFrog Insight is installed For example, http://<ip_address>:8082
            username: ""
          enabled: false
          log:
            enabled: false
            level: info
      migration:
        enabled: false
        timeoutSeconds: 3600
      name: artifactory
      nodeSelector: {}
      persistence:
        accessMode: ReadWriteOnce
        annotations: {}
        awsS3V3:
          bucketName: artifactory-aws
          cloudFrontDomainName: null
          cloudFrontKeyPairId: null
          cloudFrontPrivateKey: null
          connectionTimeout: null
          credential: null
          enablePathStyleAccess: false
          enableSignedUrlRedirect: false
          endpoint: null
          identity: null
          kmsCryptoMode: null
          kmsKeyRegion: null
          kmsServerSideEncryptionKeyId: null
          maxConnections: 50
          multiPartLimit: null
          multipartElementSize: null
          path: artifactory/filestore
          port: null
          region: null
          signatureExpirySeconds: 300
          signedUrlExpirySeconds: 30
          socketTimeout: null
          testConnection: false
          useHttp: null
          useInstanceCredentials: true
          usePresigning: false
        azureBlob:
          accountKey: null
          accountName: null
          containerName: null
          endpoint: null
          multiPartLimit: 100000000
          multipartElementSize: 50000000
          testConnection: false
        cacheProviderDir: cache
        customBinarystoreXmlSecret: null
        enabled: true
        fileSystem:
          cache:
            enabled: false
        googleStorage:
          bucketExists: false
          bucketName: artifactory-gcp
          enableSignedUrlRedirect: false
          endpoint: commondatastorage.googleapis.com
          gcpServiceAccount:
            enabled: false
          httpsOnly: false
          path: artifactory/filestore
          useInstanceCredentials: false
        lenientLimit: 1
        maxCacheSize: 5000000000
        mountPath: /var/opt/jfrog/artifactory
        nfs:
          backupDir: /var/opt/jfrog/artifactory-backup
          capacity: 10Gi
          dataDir: /var/opt/jfrog/artifactory
          haBackupMount: /backup
          haDataMount: /data
          ip: null
        redundancy: 3
        size: 20Gi
        type: file-system
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
        type: soft
      podSecurityContext:
        enabled: true
        fsGroup: 1030
        runAsGroup: 1030
        runAsNonRoot: true
        runAsUser: 1030
      priorityClass:
        create: false
        value: 1000000000
      readinessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.artifactory.tomcat.maintenanceConnector.port }}/artifactory/api/v1/system/readiness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}90{{ else }}0{{ end }}
          periodSeconds: 10
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      replicaCount: 1
      resources: {}
      schedulerName: null
      service:
        annotations: {}
        ipFamilies: []
        ipFamilyPolicy: ""
        loadBalancerSourceRanges: []
        name: artifactory
        type: ClusterIP
      serviceGrpc:
        annotations: {}
        ipFamilies: []
        ipFamilyPolicy: ""
        loadBalancerSourceRanges: []
        name: grpc
        type: ClusterIP
      servicePrependReleaseName: false
      ssh:
        enabled: false
        externalPort: 1339
        internalPort: 1339
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.artifactory.tomcat.maintenanceConnector.port }}/artifactory/api/v1/system/readiness
          initialDelaySeconds: 10
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
      statefulset:
        annotations: {}
      storageClassName: longhorn
      terminationGracePeriodSeconds: 30
      tolerations: []
      tomcat:
        connector:
          extraConfig: acceptCount="400"
          maxThreads: 200
          sendReasonPhrase: false
        maintenanceConnector:
          port: 8091
      topologySpreadConstraints: []
      unifiedSecretInstallation: true
      unifiedSecretPrependReleaseName: true
      updateStrategy:
        type: RollingUpdate
      userPluginSecrets: null
      worker:
        enabled: false
    autoscaling:
      enabled: false
      maxReplicas: 3
      metrics: |
        # - type: Resource
        #   resource:
        #     name: memory
        #     target:
        #       type: Utilization
        #       averageUtilization: 70  # Target memory usage is 75% of the allocated memory per pod
      minReplicas: 1
      targetCPUUtilizationPercentage: 70
    aws:
      license:
        enabled: false
      licenseConfigSecretName: null
      region: us-east-1
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    customIngress: ""
    database:
      allowNonPostgresql: false
      driver: null
      password: null
      secrets: {}
      type: null
      url: null
      user: null
    event:
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8061
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.event.internalPort }}/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: event
      resources: {}
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.event.internalPort }}/api/v1/system/readiness
          initialDelaySeconds: 30
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
      webhooks: {}
    evidence:
      enabled: true
      externalPort: 8052
      extraEnvironmentVariables: null
      internalPort: 8051
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.evidence.internalPort }}/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: evidence
      resources: {}
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.evidence.internalPort }}/api/v1/system/readiness
          initialDelaySeconds: 30
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
    filebeat:
      enabled: false
      extraEnvironmentVariables: {}
      filebeatYml: |
        logging.level: info
        path.data: {{ .Values.artifactory.persistence.mountPath }}/log/filebeat
        name: artifactory-filebeat
        queue.spool:
          file:
            permissions: 0760
        filebeat.inputs:
        - type: log
          enabled: true
          close_eof: ${CLOSE:false}
          paths:
             - {{ .Values.artifactory.persistence.mountPath }}/log/*.log
          fields:
            service: "jfrt"
            log_type: "artifactory"
        output:
          logstash:
             hosts: ["{{ .Values.filebeat.logstashUrl }}"]
      image:
        repository: docker.elastic.co/beats/filebeat
        version: 7.16.2
      livenessProbe:
        exec:
          command:
          - sh
          - -c
          - |
            #!/usr/bin/env bash -e
            curl --fail 127.0.0.1:5066
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
      logstashUrl: logstash:5044
      name: artifactory-filebeat
      readinessProbe:
        exec:
          command:
          - sh
          - -c
          - |
            #!/usr/bin/env bash -e
            filebeat test output
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 5
      resources: {}
    frontend:
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8070
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.frontend.internalPort }}/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: frontend
      resources: {}
      session:
        timeoutMinutes: "30"
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.frontend.internalPort }}/api/v1/system/readiness
          initialDelaySeconds: 30
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
    global:
      customCertificates:
        enabled: false
      nodeSelector: {}
      versions: {}
    hostAliases: []
    ingress:
      additionalRules: []
      annotations: {}
      artifactoryPath: /artifactory/
      className: nginx
      defaultBackend:
        enabled: true
      disableRouterBypass: false
      enabled: true
      hosts:
      - artifactory.service
      labels: {}
      pathType: ImplementationSpecific
      routerPath: /
      rtfsPath: /artifactory/service/rtfs/
      tls: []
    ingressGrpc:
      additionalRules: []
      annotations: {}
      className: ""
      defaultBackend:
        enabled: true
      enabled: false
      grpcPath: /com.jfrog
      hosts: []
      labels: {}
      name: grpc
      pathType: ImplementationSpecific
      tls: []
    initContainers:
      image:
        pullPolicy: IfNotPresent
        registry: releases-docker.jfrog.io
        repository: ubi9/ubi-minimal
        tag: 9.5.1742914212
      resources:
        limits:
          cpu: "1"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 50Mi
    installer:
      platform: null
      type: null
    jfconfig:
      database:
        maxOpenConnections: 80
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8010
      javaOpts: null
      lifecycle: {}
      livenessProbe:
        config: |
          httpGet:
            path: /jfconfig/api/v1/system/liveness
            port: {{ .Values.jfconfig.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: jfconfig
      readinessProbe:
        config: |
          httpGet:
            path: /jfconfig/api/v1/system/readiness
            port: {{ .Values.jfconfig.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 5
          failureThreshold: 30
          periodSeconds: 15
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
      resources: {}
      startupProbe:
        config: |
          httpGet:
            path: /jfconfig/api/v1/system/readiness
            port: {{ .Values.jfconfig.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 3
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
    jfconnect:
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8030
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.jfconnect.internalPort }}/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: jfconnect
      resources: {}
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.jfconnect.internalPort }}/api/v1/system/readiness
          initialDelaySeconds: 30
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
    logging:
      logToStdoutJson: false
    mc:
      database:
        maxOpenConnections: 10
      enabled: false
      idgenerator:
        maxOpenConnections: 2
      tomcat:
        connector:
          extraConfig: acceptCount="100"
          maxThreads: 50
          sendReasonPhrase: false
    metadata:
      database:
        maxOpenConnections: 80
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8086
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.metadata.internalPort }}/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: metadata
      resources: {}
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.metadata.internalPort }}/api/v1/system/readiness
          initialDelaySeconds: 30
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
    networkpolicy: []
    nginx:
      affinity: {}
      annotations: {}
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        privileged: false
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      customArtifactoryConfigMap: null
      customCommand: null
      customConfigMap: null
      customInitContainers: ""
      customPorts: []
      customSidecarContainers: ""
      customVolumeMounts: ""
      customVolumes: ""
      deployment:
        annotations: {}
      disableProxyBuffering: false
      enabled: true
      hosts: []
      http:
        enabled: true
        externalPort: 80
        internalPort: 8080
      https:
        enabled: true
        externalPort: 443
        internalPort: 8443
      image:
        pullPolicy: IfNotPresent
        registry: releases-docker.jfrog.io
        repository: jfrog/nginx-artifactory-pro
      kind: Deployment
      labels: {}
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "nginx.scheme" . }}://localhost:{{ include "nginx.port" . }}/
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          periodSeconds: 10
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      loggers: []
      loggersResources: {}
      logs:
        level: warn
        stderr: false
        stdout: false
      minAvailable: 0
      name: nginx
      nodeSelector: {}
      persistence:
        accessMode: ReadWriteOnce
        enabled: false
        mountPath: /var/opt/jfrog/nginx
        size: 5Gi
      podSecurityContext:
        enabled: true
        fsGroup: 107
        runAsGroup: 107
        runAsUser: 104
      priorityClassName: null
      readinessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "nginx.scheme" . }}://localhost:{{ include "nginx.port" . }}/router/api/v1/system/readiness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}90{{ else }}0{{ end }}
          periodSeconds: 10
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        customPorts: []
        externalTrafficPolicy: Cluster
        ipFamilies: []
        ipFamilyPolicy: ""
        loadBalancerIP: null
        loadBalancerSourceRanges: []
        ssloffload: false
        ssloffloadForceHttps: false
        type: LoadBalancer
      singleStackIPv6Cluster: false
      ssh:
        externalPort: 1339
        internalPort: 1339
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "nginx.scheme" . }}://localhost:{{ include "nginx.port" . }}/router/api/v1/system/readiness
          initialDelaySeconds: 3
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
      terminationGracePeriodSeconds: 30
      tolerations: []
      topologySpreadConstraints: []
    observability:
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8036
      lifecycle: {}
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.observability.internalPort }}/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: observability
      resources: {}
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.observability.internalPort }}/api/v1/system/readiness
          initialDelaySeconds: 30
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
    onemodel:
      apolloYaml: null
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8071
      lifecycle: {}
      livenessProbe:
        config: |
          httpGet:
            path: /api/v1/system/liveness
            port: {{ .Values.onemodel.internalPort }}
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      name: onemodel
      readinessProbe:
        config: |
          httpGet:
            path: api/v1/system/readiness
            port: {{ .Values.onemodel.internalPort }}
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          initialDelaySeconds: 0
          periodSeconds: 10
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      resources: {}
      startupProbe:
        config: |
          httpGet:
            path: api/v1/system/readiness
            port: {{ .Values.onemodel.internalPort }}
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 12
          successThreshold: 1
        enabled: true
    postgresql:
      auth:
        database: artifactory
        password: ""
        username: artifactory
      containerSecurityContext:
        enabled: true
      enabled: true
      image:
        registry: releases-docker.jfrog.io
        repository: bitnami/postgresql
        tag: 16.6.0-debian-12-r2
      primary:
        affinity: {}
        extendedConfiguration: |
          listen_addresses = '*'
          max_connections = 1500
        nodeSelector: {}
        persistence:
          enabled: true
          size: 10Gi
        resources: {}
        resourcesPreset: small
        service:
          ports:
            postgresql: 5432
        tolerations: []
      readReplicas:
        affinity: {}
        nodeSelector: {}
        tolerations: []
      securityContext:
        enabled: true
    probes:
      timeoutSeconds: 5
    rbac:
      create: false
      role:
        rules:
        - apiGroups:
          - ""
          resources:
          - services
          - endpoints
          - pods
          verbs:
          - get
          - watch
          - list
    router:
      customVolumeMounts: |
        # - name: custom-script
        #   mountPath: /scripts/script.sh
        #   subPath: script.sh
      externalPort: 8082
      extraEnvironmentVariables: null
      image:
        pullPolicy: IfNotPresent
        registry: releases-docker.jfrog.io
        repository: jfrog/router
        tag: 7.165.3
      internalPort: 8082
      lifecycle:
        preStop:
          exec:
            command:
            - sh
            - -c
            - while [[ $(curl --fail --silent --connect-timeout 2 http://localhost:8081/artifactory/api/v1/system/liveness)
              =~ OK ]]; do echo Artifactory is still alive; sleep 2; done
      livenessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "artifactory.scheme" . }}://localhost:{{ .Values.router.internalPort }}/router/api/v1/system/liveness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}90{{ else }}0{{ end }}
          periodSeconds: 10
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      name: router
      persistence:
        mountPath: /var/opt/jfrog/router
      readinessProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "artifactory.scheme" . }}://localhost:{{ .Values.router.internalPort }}/router/api/v1/system/readiness
          initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}60{{ else }}0{{ end }}
          periodSeconds: 10
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      resources: {}
      serviceRegistry:
        insecure: false
      startupProbe:
        config: |
          exec:
            command:
              - sh
              - -c
              - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "artifactory.scheme" . }}://localhost:{{ .Values.router.internalPort }}/router/api/v1/system/readiness
          initialDelaySeconds: 10
          failureThreshold: 30
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
      tlsEnabled: false
    rtfs:
      affinity: {}
      annotations: {}
      apiContext: artifactory/service/rtfs
      autoscaling:
        enabled: false
        maxReplicas: 3
        metrics: |
          # - type: Resource
          #   resource:
          #     name: memory
          #     target:
          #       type: Utilization
          #       averageUtilization: 70  # Target memory usage is 70% of the allocated memory per pod
        minReplicas: 1
        targetCPUUtilizationPercentage: 70
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      customInitContainers: ""
      customSidecarContainers: ""
      customVolumeMounts: ""
      customVolumes: ""
      deployment:
        annotations: {}
        labels: {}
      enabled: false
      extraEnvironmentVariables: []
      fullnameOverride: ""
      image:
        pullPolicy: IfNotPresent
        registry: releases-docker.jfrog.io
        repository: jfrog/artifactory-federation
        tag: 1.7.8
      internalRestPort: 8025
      javaOpts: ""
      jfrogUrl: ""
      lifecycle: {}
      livenessProbe:
        config: |
          httpGet:
            path: /{{ .Values.rtfs.apiContext }}/api/v1/system/liveness
            port: {{ .Values.rtfs.internalRestPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 5
          successThreshold: 1
        enabled: true
      name: rtfs
      nodeSelector: {}
      persistence:
        federationProperties: {}
        mountPath: /var/opt/jfrog/federation
      podSecurityContext:
        enabled: true
        fsGroup: 1030
        runAsGroup: 1030
        runAsNonRoot: true
        runAsUser: 1030
      readinessProbe:
        config: |
          httpGet:
            path: /router/api/v1/system/readiness
            port: {{ .Values.router.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 30
          successThreshold: 1
        enabled: true
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        externalIPs: []
        externalTrafficPolicy: Cluster
        grpcPort: 8026
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        restPort: 8025
        type: ClusterIP
      startupProbe:
        config: |
          httpGet:
            path: /{{ .Values.rtfs.apiContext }}/api/v1/system/readiness
            port: {{ .Values.rtfs.internalRestPort }}
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          failureThreshold: 30
          successThreshold: 1
        enabled: true
      tolerations: []
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: false
      name: null
    splitServicesToContainers: true
    systemYamlOverride:
      dataKey: null
      existingSecret: null
    topology:
      database:
        maxOpenConnections: 80
      enabled: true
      extraEnvironmentVariables: null
      internalPort: 8020
      javaOpts: null
      lifecycle: {}
      livenessProbe:
        config: |
          httpGet:
            path: /topology/api/v1/system/liveness
            port: {{ .Values.topology.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 10
          failureThreshold: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
          periodSeconds: 10
          successThreshold: 1
        enabled: true
      name: topology
      readinessProbe:
        config: |
          httpGet:
            path: /topology/api/v1/system/readiness
            port: {{ .Values.topology.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 5
          failureThreshold: 30
          periodSeconds: 15
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
      resources: {}
      startupProbe:
        config: |
          httpGet:
            path: /topology/api/v1/system/readiness
            port: {{ .Values.topology.internalPort }}
            scheme: HTTP
          initialDelaySeconds: 3
          failureThreshold: 90
          periodSeconds: 5
          timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        enabled: true
    waitForDatabase: true
