---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: helm-release-chaos
  namespace: flux-system
spec:
  chart:
    spec:
      chart: chaos-mesh
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: chaos-mesh
  interval: 10s
  targetNamespace: chaos-mesh
  values:
    bpfki:
      create: false
      grpcPort: 50051
      image:
        registry: ""
        repository: chaos-mesh/chaos-kernel
        tag: ""
      imagePullPolicy: IfNotPresent
      resources: {}
    chaosDaemon:
      affinity: {}
      capabilities:
        add:
        - SYS_PTRACE
        - NET_ADMIN
        - NET_RAW
        - MKNOD
        - SYS_CHROOT
        - SYS_ADMIN
        - KILL
        - IPC_LOCK
      env: {}
      grpcPort: 31767
      hostNetwork: false
      httpPort: 31766
      image:
        registry: ""
        repository: chaos-mesh/chaos-daemon
        tag: ""
      imagePullPolicy: IfNotPresent
      mtls:
        enabled: true
      nodeSelector: {}
      podAnnotations: {}
      podSecurityPolicy: false
      priorityClassName: ""
      privileged: true
      resources: {}
      runtime: docker
      securityContext: {}
      service:
        scrape:
          enabled: true
      serviceAccount: chaos-daemon
      serviceAccountAnnotations: {}
      socketPath: /var/run/docker.sock
      tolerations: []
      updateStrategy: {}
    chaosDlv:
      enable: false
      image:
        registry: ""
        repository: chaos-mesh/chaos-dlv
        tag: ""
      imagePullPolicy: IfNotPresent
    clusterScoped: true
    controllerManager:
      affinity: {}
      allowHostNetworkTesting: false
      chaosdSecurityMode: true
      enableFilterNamespace: false
      enabledControllers:
      - '*'
      enabledWebhooks:
      - '*'
      env:
        METRICS_PORT: 10080
        WEBHOOK_PORT: 10250
      hostNetwork: false
      image:
        registry: ""
        repository: chaos-mesh/chaos-mesh
        tag: ""
      imagePullPolicy: IfNotPresent
      leaderElection:
        enabled: true
        leaseDuration: 15s
        renewDeadline: 10s
        retryPeriod: 2s
      localHelmChart:
        enabled: false
        volume:
          hostPath:
            path: /data/helm
            type: DirectoryOrCreate
      nodeSelector: {}
      podAnnotations: {}
      podChaos:
        podFailure:
          pauseImage: gcr.io/google-containers/pause:latest
      priorityClassName: ""
      replicaCount: 3
      resources:
        limits: {}
        requests:
          cpu: 25m
          memory: 256Mi
      securityContext: {}
      service:
        type: ClusterIP
      serviceAccount: chaos-controller-manager
      serviceAccountAnnotations: {}
      serviceAccountCreate: true
      targetNamespace: chaos-mesh
      tolerations: []
    customLabels: {}
    dashboard:
      affinity: {}
      create: true
      databaseSecretName: ""
      env:
        CLEAN_SYNC_PERIOD: 12h
        DATABASE_DATASOURCE: /data/core.sqlite
        DATABASE_DRIVER: sqlite3
        LISTEN_HOST: 0.0.0.0
        LISTEN_PORT: 2333
        METRIC_HOST: 0.0.0.0
        METRIC_PORT: 2334
        TTL_EVENT: 168h
        TTL_EXPERIMENT: 336h
        TTL_SCHEDULE: 336h
        TTL_WORKFLOW: 336h
      extraContainers: []
      gcpSecurityMode:
        clientId: ""
        clientSecret: ""
        enabled: false
        existingSecret: ""
      hostNetwork: false
      image:
        registry: ""
        repository: chaos-mesh/chaos-dashboard
        tag: ""
      imagePullPolicy: IfNotPresent
      ingress:
        apiVersionOverrides: ""
        certManager: false
        enabled: true
        hosts:
        - name: chaos.service
          tls: false
          tlsSecret: dashboard.local-tls
        ingressClassName: nginx
        paths:
        - /
      nodeSelector: {}
      persistentVolume:
        enabled: true
        existingClaim: ""
        mountPath: /data
        size: 8Gi
        storageClassName: longhorn
        subPath: ""
      podAnnotations: {}
      priorityClassName: ""
      replicaCount: 1
      resources:
        limits: {}
        requests:
          cpu: 25m
          memory: 256Mi
      rootUrl: http://localhost:2333
      securityContext: {}
      securityMode: true
      service:
        annotations: {}
        type: NodePort
      serviceAccount: chaos-dashboard
      tolerations: []
    dnsServer:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - chaos-dns-server
              topologyKey: kubernetes.io/hostname
            weight: 100
      create: true
      env:
        LISTEN_HOST: 0.0.0.0
        LISTEN_PORT: 53
      grpcPort: 9288
      image:
        registry: ""
        repository: chaos-mesh/chaos-coredns
        tag: v0.2.6
      imagePullPolicy: IfNotPresent
      name: chaos-mesh-dns-server
      nodeSelector: {}
      podAnnotations: {}
      priorityClassName: ""
      replicas: 1
      resources:
        limits: {}
        requests:
          cpu: 100m
          memory: 70Mi
      serviceAccount: chaos-dns-server
      tolerations: []
    enableCtrlServer: true
    enableProfiling: true
    fullnameOverride: ""
    imagePullSecrets: []
    images:
      registry: ghcr.io
      tag: latest
    nameOverride: ""
    prometheus:
      affinity: {}
      busybox:
        image: busybox
      create: false
      image: prom/prometheus:v2.18.1
      imagePullPolicy: IfNotPresent
      nodeSelector: {}
      podAnnotations: {}
      priorityClassName: ""
      resources:
        limits:
          cpu: 500m
          memory: 1024Mi
        requests:
          cpu: 250m
          memory: 512Mi
      service:
        type: ClusterIP
      serviceAccount: prometheus
      tolerations: []
      volume:
        storage: 2Gi
        storageClassName: standard
    rbac:
      create: true
    timezone: UTC
    webhook:
      CRDS:
      - podchaos
      - iochaos
      - timechaos
      - networkchaos
      - kernelchaos
      - stresschaos
      - awschaos
      - azurechaos
      - gcpchaos
      - dnschaos
      - jvmchaos
      - schedule
      - workflow
      - httpchaos
      - blockchaos
      - physicalmachinechaos
      - physicalmachine
      - statuscheck
      - remotecluster
      FailurePolicy: Fail
      caBundlePEM: ""
      certManager:
        enabled: false
      crtPEM: ""
      keyPEM: ""
      timeoutSeconds: 5
